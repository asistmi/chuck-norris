# GitHub Actions workflow borrowed from (https://github.com/JetBrains/intellij-platform-plugin-template/actions/runs/242898088/workflow)
# and created for basic unit testing and preparation of the app release with the
# following steps:
#   - run unit tests
#   - build the app
#   - publish artifact to GH Packages for the develop branch
#   - promote up to UAT

# TODO:
# - include a PCF deployment workflow that uses GH Packages build
#   - include a step to repack the deployment binary with the environment secrets

name: Build, Test, & Promote

on:
  push:
    branches: [develop, tst, uat]
 
  pull_request:
    branches: [develop, tst, uat]
  
  # Allows the workflow to be run manually from the Actions tab
  workflow_dispatch:

jobs:
  # run test Gradle tasks
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Grant Execute Permission on gradlew
      run: chmod +x gradlew

    # JDK setup
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'

    # Cache Gradle dependencies
    - name: Gradle Dependencies Cache
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle', '**/*.gradle.kts') }}

    # Cache Gradle Wrapper
    - name: Gradle Wrapper Cache
      uses: actions/cache@v2
      with:
        path: ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle-wrapper.properties') }}

    - name: Run Check & Test
      run: ./gradlew --no-daemon -S check test
      env:
        GITHUB_USER: ${{ github.ACTOR }}
        CPS_COMMON_TOK: ${{ secrets.CPS_TOKEN }}
        GHPKG_TOK: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.properties.outputs.name }}
      version: ${{ steps.properties.outputs.version }}
      artifact: ${{ steps.properties.outputs.artifact }}
    steps:
    - uses: actions/checkout@v2
    - name: Grant Execute Permission on gradlew
      run: chmod +x gradlew

    # JDK setup
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'

    # Cache Gradle dependencies
    - name: Gradle Dependencies Cache
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle', '**/*.gradle.kts') }}

    # Cache Gradle Wrapper
    - name: Gradle Wrapper Cache
      uses: actions/cache@v2
      with:
        path: ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle-wrapper.properties') }}

    - name: Export Properties
      id: properties
      shell: bash
      run: |
        PROPERTIES="$(./gradlew properties --console=plain -q)"
        VERSION="$(echo "${PROPERTIES}" | grep "^version:" | cut -f2- -d ' ')"
        NAME="$(echo "${PROPERTIES}" | grep "^name:" | cut -f2- -d ' ')"
        ARTIFACT="${NAME}-${VERSION}.jar"

        echo "::set-output name=version::$VERSION"
        echo "::set-output name=name::$NAME"
        echo "::set-output name=artifact::$ARTIFACT"

    - name: Build
      run: ./gradlew --no-daemon -S clean build publish -x test
      env:
        GITHUB_USER: ${{ github.ACTOR }}
        CPS_COMMON_TOK: ${{ secrets.CPS_TOKEN }}
        GHPKG_TOK: ${{ secrets.GITHUB_TOKEN }}

  promote:
    runs-on: ubuntu-latest
    needs: test
    # only trigger for environments below UAT
    if: ${{ github.ref != 'refs/heads/uat' }}
    steps:
      - uses: actions/checkout@v2
      - name: Tag & Push
        run: |
          git config user.name "${{ github.ACTOR }}"
          git config user.email "${{ github.ACTOR }}@users.noreply.github.com"

          VERSION="$(./gradlew properties --console=plain -q | grep "^version:" | cut -f2- -d ' ' | tr -d "\-SNAPSHOT")"
          BRANCH_SRC=${GITHUB_REF#refs/heads/}
          [[ "${BRANCH_SRC}" -eq "develop" ]] && BRANCH_DST="tst" || BRANCH_DST="uat"

          # checkout and pull latest for destination branch
          git fetch origin ${BRANCH_DST}
          git checkout ${BRANCH_DST} && git pull

          if git merge-base --is-ancestor ${BRANCH_SRC} ${BRANCH_DST}; then
            echo "no merge necessary"
            exit 0
          fi

          # merge from source to destination branch
          git merge -X theirs --no-edit --allow-unrelated-histories ${BRANCH_SRC}

          git tag -a -m "" v${VERSION}-$(date +%s%N).${BRANCH_DST}
          git push origin ${BRANCH_DST} --tags
